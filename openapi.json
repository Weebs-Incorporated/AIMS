{
    "openapi": "3.0.3",
    "info": {
        "title": "AIMS",
        "description": "Anime Image Management Service",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/Weebs-Incorporated/AIMS"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/Weebs-Incorporated/AIMS/blob/main/LICENSE"
        },
        "version": "0.0.1"
    },
    "servers": [
        {
            "url": "http://localhost:{port}",
            "description": "Development (Local)",
            "variables": {
                "port": {
                    "default": "5000"
                }
            }
        }
    ],
    "paths": {
        "/": {
            "get": {
                "tags": ["Other"],
                "description": "Returns API information.",
                "security": [{}, { "rateLimitBypassToken": [] }],
                "responses": {
                    "200": {
                        "description": "Version, start time, and request received time.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": ["startTime", "version", "receivedRequest"],
                                    "additionalProperties": false,
                                    "properties": {
                                        "startTime": {
                                            "$ref": "#/components/schemas/ISOString"
                                        },
                                        "version": {
                                            "type": "string",
                                            "example": "12.34.56"
                                        },
                                        "receivedRequest": {
                                            "$ref": "#/components/schemas/ISOString"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimitResponse"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": ["Login Process"],
                "description": "Completes the Discord OAuth2 login process, returning a site access token.",
                "security": [{}, { "rateLimitBypassToken": [] }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["code", "redirect_uri"],
                                "additionalProperties": false,
                                "description": "OAuth2 payload given by Discord.",
                                "properties": {
                                    "code": {
                                        "type": "string"
                                    },
                                    "redirect_uri": {
                                        "type": "string",
                                        "example": "http://localhost:5000/static/discordOAuth2"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/LoginResponse"
                    },
                    "400": {
                        "description": "Error information regarding supplied code or redirect URI.",
                        "content": {
                            "text/html": {
                                "example": "Invalid code or redirect URI."
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimitResponse"
                    },
                    "500": {
                        "description": "Error information regarding server-made requests.",
                        "content": {
                            "text/html": {
                                "example": "Failed to get Discord user info."
                            }
                        }
                    }
                }
            }
        },
        "/makeLoginLink": {
            "get": {
                "tags": ["Login Process"],
                "description": "Generates an Discord OAuth2 authorization URL. This should be used for testing purposes only, as client-side generations of this are possible and [more secure](https://discord.com/developers/docs/topics/oauth2#state-and-security).",
                "security": [{}, { "rateLimitBypassToken": [] }],
                "responses": {
                    "200": {
                        "description": "Authorization URL.",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string",
                                    "example": "https://discord.com/api/v10/oauth2/authorize?client_id=01234567890&state=abcdefg&redirect_uri=http%3A%2F%2Flocalhost%3A5000%2Flogin&prompt=consent&scope=identify"
                                }
                            }
                        }
                    },
                    "429": {
                        "$ref": "#/components/responses/RateLimitResponse"
                    }
                }
            }
        },
        "/spec": {
            "get": {
                "tags": ["Other"],
                "description": "Returns underlying API spec.",
                "security": [],
                "responses": {
                    "200": {
                        "description": "API spec in JSON form."
                    }
                }
            }
        },
        "/api-docs": {
            "get": {
                "tags": ["Other"],
                "security": [],
                "responses": {
                    "200": {
                        "description": "This document."
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ISOString": {
                "type": "string",
                "example": "2022-11-08T02:20:08.190Z"
            },
            "User": {
                "type": "object",
                "required": [
                    "_id",
                    "username",
                    "discriminator",
                    "avatar",
                    "latestIp",
                    "permissions",
                    "registered",
                    "lastLoginOrRefresh",
                    "posts",
                    "comments"
                ],
                "additionalProperties": false,
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "discriminator": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string",
                        "nullable": true
                    },
                    "latestIp": {
                        "type": "string",
                        "nullable": true,
                        "description": "Only shown if the requesting user is this one or the site owner."
                    },
                    "permissions": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "registered": {
                        "$ref": "#/components/schemas/ISOString"
                    },
                    "lastLoginOrRefresh": {
                        "$ref": "#/components/schemas/ISOString"
                    },
                    "posts": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "comments": {
                        "type": "integer",
                        "minimum": 0
                    }
                }
            }
        },
        "responses": {
            "LoginResponse": {
                "description": "Successful login/register/refresh payload.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["userData", "refreshToken", "expiresInSeconds", "siteToken", "type"],
                            "additionalProperties": false,
                            "properties": {
                                "userData": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "refreshToken": {
                                    "type": "string",
                                    "description": "Token to use for extending this user's current session."
                                },
                                "expiresInSeconds": {
                                    "type": "integer",
                                    "default": 604800,
                                    "description": "How long until the current siteToken expires, in seconds."
                                },
                                "siteToken": {
                                    "type": "string",
                                    "description": "Signed JWT to send in `Authorization` header for any elevated requests to this API."
                                },
                                "type": {
                                    "type": "string",
                                    "description": "Type of operation this was generated from.",
                                    "enum": ["login", "register", "refresh"]
                                }
                            }
                        }
                    }
                }
            },
            "RateLimitResponse": {
                "description": "Too many requests, rate limited.",
                "headers": {
                    "RateLimit-Limit": {
                        "required": true,
                        "description": "Maximum number of requests per time window.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "RateLimit-Remaining": {
                        "required": true,
                        "description": "Number of requests remaining in this time window.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "RateLimit-Reset": {
                        "required": true,
                        "description": "Number of seconds until this time window ends.",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "Retry-After": {
                        "required": true,
                        "description": "Length of time window in seconds.",
                        "schema": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "siteToken": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "JWT signed by server, contains Discord refresh token and user ID."
            },
            "rateLimitBypassToken": {
                "type": "apiKey",
                "description": "Token for bypassing rate limits.",
                "name": "RateLimit-Bypass-Token",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Login Process",
            "description": "Operations for logging into the site via Discord, logging out, and refreshing."
        },
        {
            "name": "Other",
            "description": "Miscellaneous operations."
        }
    ]
}
